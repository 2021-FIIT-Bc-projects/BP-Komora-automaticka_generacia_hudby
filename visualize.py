from music21 import *
from matplotlib import pyplot as plt

""""V tomto subore sa venujem plotovaniu straty a presnosti pri trenovani modelu"""


def show_loss(history, no_of_epochs, filename="", show=True):
    plt.plot(history.history['loss'], label='loss')
    plt.plot(history.history['val_loss'], label='val_loss')
    plt.xlabel('Epoch')
    plt.xlim([0, no_of_epochs - 1])
    plt.ylim([0, 5])
    plt.legend(loc='upper left')
    if show: plt.show()
    plt.savefig(filename)
    plt.figure().clear()


def show_acc(history, no_of_epochs, filename="", show=True):
    plt.plot(history.history['accuracy'], label='accuracy')
    plt.plot(history.history['val_accuracy'], label='val_accuracy')
    plt.xlabel('Epoch')
    plt.xlim([0, no_of_epochs - 1])
    plt.ylim([0, 1])
    plt.legend(loc='upper left')
    if show: plt.show()
    plt.savefig(filename)
    plt.figure().clear()


def show_evaluation(history, no_of_epochs, filename, show=True):
    plt.plot(history.history['accuracy'], label='accuracy')
    plt.plot(history.history['val_accuracy'], label='val_accuracy')
    plt.plot(history.history['loss'], label='loss')
    plt.plot(history.history['val_loss'], label='val_loss')
    plt.xlabel('Epoch')
    plt.xlim([0, no_of_epochs - 1])
    plt.ylim([-0.05, 5])
    plt.legend(loc='upper left')
    plt.savefig(filename)
    if show: plt.show()
    plt.figure().clear()


def generate_notes(predicted_notes):

    # # parsing notes
    # littleMelody = converter.parse("tinynotation: c4 d8 f g16 a g f#")
    # littleMelody.show()

    offset = 0
    output_notes = []

    # create note and chord objects based on the values generated by the model
    for pattern in predicted_notes:

        element = pattern
        quarterLength = 1.0

        # element is a rest
        if element == 'Rest':
            new_note = note.Rest(quarterLength=quarterLength)
            output_notes.append(new_note)

        # element is a chord
        elif ('.' in element) or element.isdigit():
            notes_in_chord = element.split('.')
            notes = []

            for current_note in notes_in_chord:
                new_note = note.Note(int(current_note), quarterLength=quarterLength)
                new_note.storedInstrument = instrument.Piano()
                notes.append(new_note)

            new_chord = chord.Chord(notes)
            new_chord.offset = offset
            output_notes.append(new_chord)

        # element is a note
        else:
            new_note = note.Note(element, quarterLength=quarterLength)
            new_note.offset = offset
            new_note.storedInstrument = instrument.Piano()
            output_notes.append(new_note)

        # increase offset each iteration so that notes do not stack
        offset += 1

    midi_stream = stream.Stream(output_notes)
    midi_stream.show()

