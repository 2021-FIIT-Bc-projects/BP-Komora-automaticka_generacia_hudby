import argparse
import numpy as np

from IO import load_data, init_output, load_base_music
from IO import bundle_output
from IO import export


def generate_music(random_music, model, no_of_timesteps, n_vocab, range_of_prediction=10):
    predictions = []

    for i in range(range_of_prediction):
        random_music = random_music.reshape(1, no_of_timesteps)

        random_music = np.reshape(random_music, (random_music.shape[0], 1, random_music.shape[1]))
        prob = model.predict(random_music)[0]

        y_pred = np.argmax(prob, axis=0)
        predictions.append(y_pred)

        random_music = np.insert(random_music[0][0], len(random_music[0][0]), y_pred / n_vocab)
        random_music = random_music[1:]

    return np.array(predictions)


if __name__ == "__main__":

    # create a parser object
    parser = argparse.ArgumentParser(description="An addition program")

    # add argument
    parser.add_argument("-path", type=str, nargs=1, metavar="path trained model")
    parser.add_argument("-base", type=str, nargs=1, default="unknown", metavar="type of base music for prediction")
    parser.add_argument("-pred", type=int, nargs=1, default=5, metavar="number of predictions")
    parser.add_argument("-len", type=int, nargs=1, default=32, metavar="length of prediction")

    # parse the arguments from standard input
    args = parser.parse_args()

    # Load data
    input_path = args.path[0]
    model, int_to_note, params = load_data(input_path)

    print(params)
    n_vocab = len(int_to_note)

    base_music_type = args.base[0]
    predictions = args.pred[0]
    prediction_length = args.len[0]

    init_output()

    for i in range(predictions):
        base_music = load_base_music(base_music_type, len(int_to_note), params['no_of_timesteps'])
        prediction = generate_music(base_music, model, params['no_of_timesteps'], n_vocab, range_of_prediction=prediction_length)
        predicted_notes = [int_to_note[str(i)] for i in prediction]
        export(predicted_notes, filename=('autogenerated_music_%d.mid' % (i + 1)))

    if params["model"]:
        bundle_output(params['no_of_timesteps'], params["model"], base_music_type)
    else:
        bundle_output(params['no_of_timesteps'])
